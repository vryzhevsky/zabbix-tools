<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.0</version>
    <date>2021-03-03T12:08:36Z</date>
    <media_types>
        <media_type>
            <name>Telegram ext</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>Message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>ParseMode</name>
                    <value>HTML</value>
                </parameter>
                <parameter>
                    <name>Subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>To</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>Token</name>
                    <value>put token here</value>
                </parameter>
            </parameters>
            <script>var Telegram = {&#13;
    emoji_map: {&#13;
        &quot;s0&quot;: &quot;‚ùï&quot;,&#13;
        &quot;s1&quot;: &quot;‚ÑπÔ∏è&quot;,&#13;
        &quot;s2&quot;: &quot;‚ö†Ô∏è&quot;,&#13;
        &quot;s3&quot;: &quot;üî∏&quot;,&#13;
        &quot;s4&quot;: &quot;üõë&quot;,&#13;
        &quot;s5&quot;: &quot;üí£&quot;,&#13;
        &quot;ok&quot;: &quot;‚úÖ&quot;,&#13;
        &quot;update&quot;: &quot;üîÑ&quot;&#13;
    },&#13;
&#13;
    html_tags_map: {&#13;
        &quot;&lt;br&gt;&quot;: &quot;&quot;&#13;
    },&#13;
&#13;
    token: null,&#13;
    to: null,&#13;
    message: null,&#13;
    proxy: null,&#13;
    parse_mode: null,&#13;
&#13;
    sendMessage: function() {&#13;
        var params = {&#13;
            chat_id: Telegram.to,&#13;
            text: Telegram.message,&#13;
            disable_web_page_preview: true,&#13;
            disable_notification: false&#13;
        },&#13;
        data,&#13;
        response,&#13;
        request = new CurlHttpRequest(),&#13;
        url = 'https://api.telegram.org/bot' + Telegram.token + '/sendMessage';&#13;
&#13;
        if (Telegram.parse_mode !== null) {&#13;
            params['parse_mode'] = Telegram.parse_mode;&#13;
        }&#13;
&#13;
        if (Telegram.proxy) {&#13;
            request.SetProxy(Telegram.proxy);&#13;
        }&#13;
&#13;
        request.AddHeader('Content-Type: application/json');&#13;
        data = JSON.stringify(params);&#13;
&#13;
        // Remove replace() function if you want to see the exposed token in the log file.&#13;
        Zabbix.Log(4, '[Telegram Webhook] URL: ' + url.replace(Telegram.token, '&lt;TOKEN&gt;'));&#13;
        Zabbix.Log(4, '[Telegram Webhook] params: ' + data);&#13;
        response = request.Post(url, data);&#13;
        Zabbix.Log(4, '[Telegram Webhook] HTTP code: ' + request.Status());&#13;
&#13;
        try {&#13;
            response = JSON.parse(response);&#13;
        }&#13;
        catch (error) {&#13;
            response = null;&#13;
        }&#13;
&#13;
        if (request.Status() !== 200 || typeof response.ok !== 'boolean' || response.ok !== true) {&#13;
            if (typeof response.description === 'string') {&#13;
                throw response.description;&#13;
            }&#13;
            else {&#13;
                throw 'Unknown error. Check debug log for more information.'&#13;
            }&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
try {&#13;
    var params = JSON.parse(value);&#13;
&#13;
    if (typeof params.Token === 'undefined') {&#13;
        throw 'Incorrect value is given for parameter &quot;Token&quot;: parameter is missing';&#13;
    }&#13;
&#13;
    Telegram.token = params.Token;&#13;
&#13;
    if (params.HTTPProxy) {&#13;
        Telegram.proxy = params.HTTPProxy;&#13;
    } &#13;
&#13;
    if (['Markdown', 'HTML', 'MarkdownV2'].indexOf(params.ParseMode) !== -1) {&#13;
        Telegram.parse_mode = params.ParseMode;&#13;
    }&#13;
&#13;
    Telegram.to = params.To;&#13;
    Telegram.message = params.Subject + '\n' + params.Message;&#13;
&#13;
    // Replace emoji&#13;
    var emoji_re = /{{(\w*)}}/gi;&#13;
    Telegram.message = Telegram.message.replace(emoji_re, function(match, p1) {&#13;
        if (typeof Telegram.emoji_map[p1.toLowerCase()] !== 'undefined') {&#13;
            return Telegram.emoji_map[p1.toLowerCase()]&#13;
        }&#13;
        else {&#13;
            return '{{' + p1 + '}}'&#13;
        }&#13;
    });&#13;
&#13;
    // Replace unsupported HTML tags&#13;
    var html_re = /(&lt;\w*&gt;)/gi;&#13;
    Telegram.message = Telegram.message.replace(html_re, function(match, p1) {&#13;
        if (typeof Telegram.html_tags_map[p1.toLowerCase()] !== 'undefined') {&#13;
            return Telegram.html_tags_map[p1.toLowerCase()]&#13;
        }&#13;
        else {&#13;
            return p1&#13;
        }&#13;
    });&#13;
&#13;
    Telegram.sendMessage();&#13;
&#13;
    return 'OK';&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(4, '[Telegram Webhook] notification failed: ' + error);&#13;
    throw 'Sending failed: ' + error + '.';&#13;
}</script>
            <timeout>10s</timeout>
            <description>https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/telegram&#13;
&#13;
1. Register bot: send &quot;/newbot&quot; to @BotFather and follow instructions&#13;
2. Copy and paste the obtained token into the &quot;Token&quot; field above&#13;
3. If you want to send personal notifications, you need to get chat id of the user you want to send messages to:&#13;
    3.1. Send &quot;/getid&quot; to &quot;@myidbot&quot; in Telegram messenger&#13;
    3.2. Copy returned chat id and save it in the &quot;Telegram Webhook&quot; media for the user&#13;
    3.3. Ask the user to send &quot;/start&quot; to your bot (Telegram bot won't send anything to the user without it)&#13;
4. If you want to send group notifications, you need to get group id of the group you want to send messages to:&#13;
    4.1. Add &quot;@myidbot&quot; to your group&#13;
    4.2. Send &quot;/getgroupid@myidbot&quot; in your group&#13;
    4.3. Copy returned group id save it in the &quot;Telegram Webhook&quot; media for the user you created for  group notifications&#13;
    4.4. Send &quot;/start@your_bot_name_here&quot; in your group (Telegram bot won't send anything to the group without it)</description>
            <message_templates>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>PROBLEM</operation_mode>
                    <subject>{{s{EVENT.NSEVERITY}}} &lt;strong&gt;{EVENT.NAME}&lt;/strong&gt;</subject>
                    <message>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {EVENT.SEVERITY}&#13;
–£–∑–µ–ª: {HOST.NAME}&#13;
–ú–æ–¥–µ–ª—å: {INVENTORY.MODEL}&#13;
–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {INVENTORY.SERIALNO.A}&#13;
Host IP: {HOST.CONN1}&#13;
–î–µ—Ç–∞–ª–∏:&#13;
{TRIGGER.DESCRIPTION}&#13;
&#13;
–í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {EVENT.DATE} {EVENT.TIME}&#13;
&#13;
ID: #event{EVENT.ID}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>RECOVERY</operation_mode>
                    <subject>{{ok}} &lt;strong&gt;{EVENT.NAME}&lt;/strong&gt;</subject>
                    <message>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {EVENT.SEVERITY}&#13;
–£–∑–µ–ª: {HOST.NAME}&#13;
Host IP: {HOST.CONN1}&#13;
&#13;
–í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {EVENT.DATE} {EVENT.TIME}&#13;
–í—Ä–µ–º—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è: {EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME}&#13;
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {EVENT.AGE}&#13;
–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:&lt;BR&gt;&lt;pre&gt;{EVENT.ACK.HISTORY}&lt;/pre&gt;&#13;
&#13;
ID: #event{EVENT.ID}</message>
                </message_template>
                <message_template>
                    <event_source>TRIGGERS</event_source>
                    <operation_mode>UPDATE</operation_mode>
                    <subject>{{update}} &lt;strong&gt;{EVENT.NAME}&lt;/strong&gt;</subject>
                    <message>–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {EVENT.SEVERITY}&#13;
–£–∑–µ–ª: {HOST.NAME}&#13;
–ú–æ–¥–µ–ª—å: {INVENTORY.MODEL}&#13;
–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {INVENTORY.SERIALNO.A}&#13;
Host IP: {HOST.CONN1}&#13;
–î–µ—Ç–∞–ª–∏:&#13;
{TRIGGER.DESCRIPTION}&#13;
&#13;
–í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {EVENT.DATE} {EVENT.TIME}&#13;
–í—Ä–µ–º—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è: {EVENT.RECOVERY.DATE} {EVENT.RECOVERY.TIME}&#13;
–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {EVENT.AGE}&#13;
–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π:&lt;BR&gt;&lt;pre&gt;{EVENT.ACK.HISTORY}&lt;/pre&gt;&#13;
&#13;
ID: #event{EVENT.ID}</message>
                </message_template>
            </message_templates>
        </media_type>
    </media_types>
</zabbix_export>
